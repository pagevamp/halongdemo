<?php

namespace Tests\Feature\Media;

use App\Repos\Models\Cruise;
use App\Repos\Models\Media;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class MediaDeleteTest extends TestCase
{
    use RefreshDatabase;
    use CreateMediaTrait;

    private $storage;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->storage = Storage::disk(config('storage.driver.media'));
    }

    public function test_if_client_can_delete_media()
    {
        $this->signInAs('client');
        $media = factory(Media::class)->states('with_cruise_gallery', 'with_alt_and_featured_index')->create();
        $this->deleteJson(route('media.delete', $media->id))->assertStatus(403);
    }

    public function test_if_agent_can_delete_media()
    {
        $this->signInAs('agent');
        $media = factory(Media::class)->states('with_cruise_gallery', 'with_alt_and_featured_index')->create();
        $this->deleteJson(route('media.delete', $media->id))->assertStatus(403);
    }

    public function test_if_guest_can_delete_media()
    {
        $media = factory(Media::class)->states('with_cruise_gallery', 'with_alt_and_featured_index')->create();
        $this->deleteJson(route('media.delete', $media->id))->assertStatus(401);
    }

    public function test_if_admin_can_delete_media()
    {
        $this->signInAs('admin');
        $fakeFile = UploadedFile::fake()->image('test.jpg');
        $params = factory(Media::class)->states('with_cruise_gallery', 'with_alt_and_featured_index')->make(['files' => [$fakeFile]]);

        $response = $this->postJson(route('media.create'), $params->toArray())->assertStatus(201);
        $relativePath = config('storage.folder.media').'/'.$this->getExpectedFileName($fakeFile);
        $media = json_decode($response->getContent(), 1);

        $this->deleteJson(route('media.delete', $media['data'][0]['id']))->assertStatus(200);

        $this->storage->assertMissing($relativePath);

        foreach ($this->getExpectedThumbnails($fakeFile, new Cruise()) as $thumbnail) {
            $this->storage->assertMissing($thumbnail['relative_path']);
        }

        $this->assertDatabaseMissing('media', $params->toArray());
    }
}
